#!/usr/bin/make -f

# enable verbose build messages
export DH_VERBOSE=1

# enable all build hardening flags
export DEB_BUILD_MAINT_OPTIONS=hardening=+all

# indicate that binary targets do not require root
export DEB_RULES_REQUIRES_ROOT=no

# use system LLVM via unbundling
export AR=llvm-ar-7
export NM=llvm-nm-7
export CC=clang-7
export CXX=clang++-7

# hack to allow clang to find the default cfi_blacklist.txt
export CXXFLAGS+=-resource-dir=$(shell clang-7 --print-resource-dir) \

export CPPFLAGS+=-resource-dir=$(shell clang-7 --print-resource-dir) \

export CFLAGS+=-resource-dir=$(shell clang-7 --print-resource-dir) \

# more verbose linker output
export LDFLAGS+=-Wl,--stats

# extra flags to reduce warnings that aren't very useful
export CXXFLAGS+=-Wno-pedantic \
                 -Wno-unused-function \
                 -Wno-unused-variable \
                 -Wno-deprecated-declarations \

# ignore warnings for minor mistakes that are too common
export CXXFLAGS+=-Wno-return-type \

# set the appropriate cpu architecture
DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq (i386,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x86\"
endif
ifeq (amd64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x64\"
endif
ifeq (arm64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm64\"
endif
ifeq (armhf,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm\" arm_use_neon=false
endif

config_bundle=debian/scripts/ungoogled-chromium/config_bundles/$(shell cat debian/ungoogled-config-bundle)

# add gn flags from config bundle
defines+=$(shell debian/scripts/get-gnargs-shell $(config_bundle))

# some notes about embedded libraries
#  can't use system nss since net/third_party/nss is heavily patched
#  can't use system ots (open text *summarizer*) since that's not google's ots (open text *sanitizer*)

# handle parallel build options
njobs=1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
njobs=$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# paths to files needed by flot
flotpaths=/usr/share/javascript/jquery/*min.js \
          /usr/share/javascript/jquery-flot/*min.js \

buildkit_cli=debian/scripts/ungoogled-chromium/run_buildkit_cli.py
domsubcache=debian/scripts/ungoogled-chromium/domsubcache.tar.gz

%:
	dh $@

out/Release/gn:
	mkdir -p out/Release || true
	cp base/numerics/safe_conversions_arm_impl.h base/numerics/safe_math_arm_impl.h tools/gn/base/numerics
	./tools/gn/bootstrap/bootstrap.py --skip-generate-buildfiles -j$(njobs) -o out/Release/gn

override_dh_auto_configure:
	# output compiler information
	$(CXX) --version
	# put yasm script in the location expected by gn
	ln -sf ../pdfium/third_party/yasm/run_yasm.py third_party/yasm
	# strip out system third_party libraries
	# NOTE: Removing base/third_party/libevent/BUILD.gn and build/config/freetype/freetype.gni in scripts/unbundle
	./debian/scripts/unbundle
	# clean polymer files manually (debian/clean doesn't work on directories)
	rm -rf third_party/catapult/third_party/polymer/components || true
	# apply domain substitution
	if [ ! -e $(domsubcache) ]; then python3 -B $(buildkit_cli) domains apply -b $(config_bundle) -c $(domsubcache) ./; fi
	# use system flot
	for file in $(flotpaths); do ln -sf $$file third_party/flot; done
	# use polymer from chromium's top level third_party directory
	ln -sf ../../../../third_party/polymer/v1_0/components-chromium third_party/catapult/third_party/polymer/components

override_dh_auto_build-arch: out/Release/gn
	./out/Release/gn gen out/Release --args="$(defines)" --fail-on-unused-args
	ninja -j$(njobs) -C out/Release chrome chrome_sandbox content_shell chromedriver

override_dh_auto_build-indep: out/Release/gn
	./out/Release/gn gen out/Release --args="$(defines)" --fail-on-unused-args
	ninja -j$(njobs) -C out/Release packed_resources

override_dh_prep:
	# building is done by this step; remove domain substitution
	if [ -e $(domsubcache) ]; then python3 -B $(buildkit_cli) domains revert -c $(domsubcache) ./; fi
	dh_prep

override_dh_auto_install-arch:
	cp out/Release/chrome out/Release/chromium
	cp out/Release/content_shell out/Release/chromium-shell
	cp out/Release/chrome_sandbox out/Release/chrome-sandbox
	cp out/Release/locales/en-US.pak out/Release/resources
	chmod 4755 out/Release/chrome-sandbox # suid sandbox
	sed -e s/@@PACKAGE@@/chromium/g -e s/@@MENUNAME@@/Chromium/g \
	    < chrome/app/resources/manpage.1.in > out/Release/chromium.1
	dh_auto_install
	# update launcher script with build information
	sed 's|@BUILD_DIST@|$(shell printf "%s %s/%s" $(shell lsb_release -si) $(shell lsb_release -sc) $(shell lsb_release -sr))|' \
	    < debian/scripts/chromium > debian/ungoogled-chromium/usr/bin/chromium
	# move icons into /usr/share
	./debian/scripts/icons

override_dh_auto_install-indep:
	mv out/Release/locales/en-US.pak out/Release/en-US.pak.indepexclude || true
	dh_auto_install

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_strip:
	dh_strip --no-automatic-dbgsym # Do not build any debug packages

override_dh_gencontrol:
	dh_gencontrol -- -VBuilt-Using="$(shell dpkg-query -f '$${source:Package} (= $${source:Version}), ' -W libjs-jquery libjs-jquery-flot)"

override_dh_auto_clean:
	rm -rf out
	find . -name \*.pyc -execdir rm -f {} \;
	dh_auto_clean

###################### upstream source downloading ############################

url=https://gsdview.appspot.com/chromium-browser-official
version=$(shell dpkg-parsechangelog -S Version | sed s/-.*//)
extract=chromium-$(version)
tarfile=$(extract).tar
tarball=$(tarfile).xz
debvers=../ungoogled-chromium_$(version)
origtxz=$(debvers).orig.tar.xz
removed=$(debvers).files-removed
seconds=$(debvers).seconds

get-orig-source:
	if [ ! -e debian/patches ]; then python3 -B $(buildkit_cli) patches export -b $(config_bundle) debian/patches/; fi
	wget -nv --show-progress -c $(url)/$(tarball) -O ../$(tarball)
	cp /usr/share/perl5/Devscripts/MkOrigtargz.pm debian/scripts/mk-origtargz
	patch -p1 < debian/scripts/mk-origtargz.patch
	date +%s > $(seconds)
	perl debian/scripts/mk-origtargz ../$(tarball) > $(removed)
	echo $$(($$(date +%s) - $$(cat $(seconds)))) seconds
	test ! -e $(extract) || rm -rf $(extract)
	tar xf ../$(tarball)
	python3 -B $(buildkit_cli) prune -b $(config_bundle) $(extract)
	echo $$(($$(date +%s) - $$(cat $(seconds)))) seconds
	while read line; do rm -rf $$line; done < $(removed)
	cd $(extract) && ../debian/scripts/check-upstream
	echo $$(($$(date +%s) - $$(cat $(seconds)))) seconds
	test ! -e $(origtxz) || rm -f $(origtxz)
	tar cf - $(extract) | xz -6 -T $(njobs) - > $(origtxz)
	echo $$(($$(date +%s) - $$(cat $(seconds)))) seconds
	rm -rf $(extract)
	echo $$(($$(date +%s) - $$(cat $(seconds)))) seconds | tee seconds
	@mv -f seconds $(seconds)
	find debian/scripts/ungoogled-chromium/ -name __pycache__ -type d -exec rm -r {} +

setup-local-src:
	mkdir ../download_cache || true
	python3 -B $(buildkit_cli) downloads retrieve -b $(config_bundle) -c ../download_cache
	python3 -B $(buildkit_cli) downloads unpack -b $(config_bundle) -c ../download_cache ./
	python3 -B $(buildkit_cli) prune -b $(config_bundle) ./
	python3 -B $(buildkit_cli) patches export -b $(config_bundle) debian/patches/
